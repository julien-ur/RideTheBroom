<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CsvHelper</name>
    </assembly>
    <members>
        <member name="T:CsvHelper.CsvFieldAttribute">
            <summary>
            Used to set behavior of a field when
            reading a writing a CSV file.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvFieldAttribute.FieldName">
            <summary>
            When reading, is used to get the field
            at the index of the name if there was a
            header specified. When writing, sets
            the name of the field in the header record.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvFieldAttribute.FieldIndex">
            <summary>
            When reading, is used to get the field at
            the given index. If a FieldName is specified,
            that will be used instead. When writing, the fields
            will be written in the order of the field
            indexes.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvFieldAttribute.Ignore">
            <summary>
            When reading, not used. When writing,
            ignores the property and doesn't
            write it to the CSV file.
            </summary>
        </member>
        <member name="T:CsvHelper.ReflectionHelper">
            <summary>
            Common reflection tasks.
            </summary>
        </member>
        <member name="M:CsvHelper.ReflectionHelper.GetAttribute``1(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Gets the first attribute of type T on property.
            </summary>
            <typeparam name="T">Type of attribute to get.</typeparam>
            <param name="property">The <see cref="T:System.Reflection.PropertyInfo"/> to get the attribute from.</param>
            <param name="inherit">True to search inheritance tree, otherwise false.</param>
            <returns>The first attribute of type T, otherwise null.</returns>
        </member>
        <member name="T:CsvHelper.CsvPropertyInfoComparer">
            <summary>
            Used to compare properties by <see cref="T:CsvHelper.CsvFieldAttribute"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvPropertyInfoComparer.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of CsvFieldAttributeComparer.
            </summary>
            <param name="useFieldName">True to compare by <see cref="P:CsvHelper.CsvFieldAttribute.FieldName"/>, otherwise compares by <see cref="P:CsvHelper.CsvFieldAttribute.FieldIndex"/>.</param>
        </member>
        <member name="M:CsvHelper.CsvPropertyInfoComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <returns>
            Value 
                                Condition 
                                Less than zero 
                            <paramref name="x"/> is less than <paramref name="y"/>. 
                                Zero 
                            <paramref name="x"/> equals <paramref name="y"/>. 
                                Greater than zero 
                            <paramref name="x"/> is greater than <paramref name="y"/>. 
            </returns>
            <param name="x">The first object to compare. 
                            </param><param name="y">The second object to compare. 
                            </param><exception cref="T:System.ArgumentException">Neither <paramref name="x"/> nor <paramref name="y"/> implements the <see cref="T:System.IComparable"/> interface.
                                -or- 
                            <paramref name="x"/> and <paramref name="y"/> are of different types and neither one can handle comparisons with the other. 
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="T:CsvHelper.CsvReaderOptions">
            <summary>
            Options for the <see cref="T:CsvHelper.CsvReader"/>.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvReaderOptions.Strict">
            <summary>
            Gets or sets the strict reading flag.
            True to enable strict reading, otherwise false.
            Strict reading will cause a <see cref="T:System.MissingFieldException"/>
            to be thrown if a named index is not found.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvReaderOptions.PropertyBindingFlags">
            <summary>
            Gets or sets the property binding flags.
            This determines what properties on the custom
            class are used when reading records. Default
            is Public | Instance.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvReaderOptions.HasHeaderRecord">
            <summary>
            Gets or sets a value indicating if the
            CSV file being read has a header record.
            Default is true.
            </summary>
        </member>
        <member name="T:CsvHelper.ICsvParser">
            <summary>
            Defines methods used the parse a CSV file.
            </summary>
        </member>
        <member name="M:CsvHelper.ICsvParser.Read">
            <summary>
            Reads a record from the CSV file.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> of fields for the record read.</returns>
        </member>
        <member name="P:CsvHelper.ICsvParser.BufferSize">
            <summary>
            Gets the size of the buffer
            used when reading the stream.
            </summary>
        </member>
        <member name="P:CsvHelper.ICsvParser.Delimiter">
            <summary>
            Gets the delimiter used to
            separate the fields of the CSV records.
            </summary>
        </member>
        <member name="P:CsvHelper.ICsvParser.FieldCount">
            <summary>
            Gets the field count.
            </summary>
        </member>
        <member name="T:CsvHelper.CsvWriterOptions">
            <summary>
            Options for the <see cref="T:CsvHelper.CsvWriter"/>.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvWriterOptions.Delimiter">
            <summary>
            Gets or sets the delimiter used when
            writing the CSV file.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvWriterOptions.HasHeaderRecord">
            <summary>
            Gets or sets a value indicating a header
            record should be written to the CSV file.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvWriterOptions.PropertyBindingFlags">
            <summary>
            Gets or sets the property binding flags.
            This determines what properties on the custom
            class are used when writing records. Default
            is Public | Instance.
            </summary>
        </member>
        <member name="T:CsvHelper.ICsvReader">
            <summary>
            Defines methods used to read parsed data
            from a CSV file.
            </summary>
        </member>
        <member name="M:CsvHelper.ICsvReader.Read">
            <summary>
            Advances the reader to the next record.
            </summary>
            <returns>True if there are more records, otherwise false.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReader.GetField(System.Int32)">
            <summary>
            Gets the raw field at index.
            </summary>
            <param name="index">The index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReader.GetField(System.String)">
            <summary>
            Gets the raw field at name.
            </summary>
            <param name="name">The named index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReader.GetField``1(System.Int32)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at index.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="index">The index of the field.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReader.GetField``1(System.String)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at name.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReader.GetField``1(System.Int32,System.ComponentModel.TypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at index using
            the given <see cref="T:System.ComponentModel.TypeConverter"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="index">The index of the field.</param>
            <param name="converter">The <see cref="T:System.ComponentModel.TypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReader.GetField``1(System.String,System.ComponentModel.TypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at name using
            the given <see cref="T:System.ComponentModel.TypeConverter"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="converter">The <see cref="T:System.ComponentModel.TypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReader.TryGetField(System.Int32,System.String@)">
            <summary>
            Gets the raw field at index.
            </summary>
            <param name="index">The index of the field.</param>
            <param name="field">The raw field.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReader.TryGetField(System.String,System.String@)">
            <summary>
            Gets the raw field at name.
            </summary>
            <param name="name">The named index of the field.</param>
            <param name="field">The raw field.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReader.TryGetField``1(System.Int32,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at index.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="index">The index of the field.</param>
            <param name="field">The field converted to type T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReader.TryGetField``1(System.String,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at name.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReader.TryGetField``1(System.Int32,System.ComponentModel.TypeConverter,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at index
            using the specified <see cref="T:System.ComponentModel.TypeConverter"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="index">The index of the field.</param>
            <param name="converter">The <see cref="T:System.ComponentModel.TypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReader.TryGetField``1(System.String,System.ComponentModel.TypeConverter,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at name
            using the specified <see cref="T:System.ComponentModel.TypeConverter"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="converter">The <see cref="T:System.ComponentModel.TypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReader.GetRecord``1">
            <summary>
            Gets the record converted into <see cref="T:System.Type"/> T.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the record.</typeparam>
            <returns>The record converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.ICsvReader.GetRecords``1">
            <summary>
            Gets all the records in the CSV file and
            converts each to <see cref="T:System.Type"/> T. The Read method
            should not be used when using this.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the record.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> of records.</returns>
        </member>
        <member name="P:CsvHelper.ICsvReader.FieldHeaders">
            <summary>
            Gets the field headers.
            </summary>
        </member>
        <member name="P:CsvHelper.ICsvReader.HasHeaderRecord">
            <summary>
            A value indicating if the CSV file has a header record.
            </summary>
        </member>
        <member name="P:CsvHelper.ICsvReader.PropertyBindingFlags">
            <summary>
            Gets the binding flags used to populate
            custom class objects.
            </summary>
        </member>
        <member name="P:CsvHelper.ICsvReader.Strict">
            <summary>
            Gets a value indicating if strict reading is enabled.
            </summary>
        </member>
        <member name="P:CsvHelper.ICsvReader.Item(System.Int32)">
            <summary>
            Gets the raw field at index.
            </summary>
            <param name="index">The index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="P:CsvHelper.ICsvReader.Item(System.String)">
            <summary>
            Gets the raw string field at name.
            </summary>
            <param name="name">The named index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="T:CsvHelper.CsvParserOptions">
            <summary>
            Options for the <see cref="T:CsvHelper.CsvParser"/>.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvParserOptions.BufferSize">
            <summary>
            The buffer size to use when
            reading the stream.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvParserOptions.FieldCount">
            <summary>
            The number of fields the CSV file has.
            If this is known ahead of time, set
            to make parsing more efficient.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvParserOptions.Delimiter">
            <summary>
            The delimiter used to separate fields
            of the CSV records.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvParserOptions.AllowComments">
            <summary>
            True to allow '#' at the beginning of
            a line to denote a line that is commented 
            out. Otherwise, false.
            </summary>
        </member>
        <member name="T:CsvHelper.CsvParser">
            <summary>
            Parses a CSV file.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvParser.#ctor(System.IO.StreamReader)">
            <summary>
            Creates a new parser using the given <see cref="T:System.IO.StreamReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.IO.StreamReader"/> with the CSV file data.</param>
        </member>
        <member name="M:CsvHelper.CsvParser.#ctor(System.IO.StreamReader,CsvHelper.CsvParserOptions)">
            <summary>
            Creates a new parser using the given <see cref="T:System.IO.StreamReader"/>
            and <see cref="T:CsvHelper.CsvParserOptions"/>.
            </summary>
            <param name="reader">The <see cref="T:System.IO.StreamReader"/> with teh CSV file data.</param>
            <param name="options">The <see cref="T:CsvHelper.CsvParserOptions"/> used for parsing the CSV file.</param>
        </member>
        <member name="M:CsvHelper.CsvParser.Read">
            <summary>
            Reads a record from the CSV file.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> of fields for the record read.
            If there are no more records, null is returned.</returns>
        </member>
        <member name="M:CsvHelper.CsvParser.AddFieldToRecord(System.Int32@,System.String,System.Boolean)">
            <summary>
            Adds the field to the current record.
            </summary>
            <param name="recordPosition">The record position to add the field to.</param>
            <param name="field">The field to add.</param>
            <param name="hasQuotes">True if the field is quoted, otherwise false.</param>
        </member>
        <member name="M:CsvHelper.CsvParser.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:CsvHelper.CsvParser.Dispose(System.Boolean)">
            <summary>
            Checks if the instance has been disposed of.
            </summary>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:CsvHelper.CsvParser.CheckDisposed">
            <summary>
            Checks if the reader has been read yet.
            </summary>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="P:CsvHelper.CsvParser.Delimiter">
            <summary>
            Gets the delimiter used to
            separate the fields of the CSV records.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvParser.BufferSize">
            <summary>
            Gets the size of the buffer
            used when reading the stream and
            creating the fields.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvParser.FieldCount">
            <summary>
            Gets the field count.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvParser.AllowComments">
            <summary>
            Gets a value indicating if '#'
            can be used at the beginning of
            a line to denote a line that is
            commented out.
            </summary>
        </member>
        <member name="T:CsvHelper.ICsvWriter">
            <summary>
            Defines methods used to write to a CSV file.
            </summary>
        </member>
        <member name="M:CsvHelper.ICsvWriter.WriteField(System.String)">
            <summary>
            Writes the field to the CSV file.
            When all fields are written for a record,
            <see cref="M:CsvHelper.ICsvWriter.NextRecord"/> must be called
            to complete writing of the current record.
            </summary>
            <param name="field">The field to write.</param>
        </member>
        <member name="M:CsvHelper.ICsvWriter.WriteField``1(``0)">
            <summary>
            Writes the field to the CSV file.
            When all fields are written for a record,
            <see cref="M:CsvHelper.ICsvWriter.NextRecord"/> must be called
            to complete writing of the current record.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="field">The field to write.</param>
        </member>
        <member name="M:CsvHelper.ICsvWriter.NextRecord">
            <summary>
            Ends writing of the current record
            and starts a new record. This is used
            when manually writing records with <see cref="M:CsvHelper.ICsvWriter.WriteField``1(``0)"/>
            </summary>
        </member>
        <member name="M:CsvHelper.ICsvWriter.WriteRecord``1(``0)">
            <summary>
            Writes the record to the CSV file.
            </summary>
            <typeparam name="T">The type of the record.</typeparam>
            <param name="record">The record to write.</param>
        </member>
        <member name="M:CsvHelper.ICsvWriter.WriteRecords``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes the list of records to the CSV file.
            </summary>
            <typeparam name="T">The type of the record.</typeparam>
            <param name="records">The list of records to write.</param>
        </member>
        <member name="P:CsvHelper.ICsvWriter.Delimiter">
            <summary>
            Gets or sets the delimiter used to
            separate the fields of the CSV records.
            </summary>
        </member>
        <member name="P:CsvHelper.ICsvWriter.HasHeaderRecord">
            <summary>
            Gets are sets a value indicating if the
            CSV file has a header record.
            </summary>
        </member>
        <member name="P:CsvHelper.ICsvWriter.PropertyBindingFlags">
            <summary>
            Gets the binding flags used to get the properties
            from the the custom class object.
            </summary>
        </member>
        <member name="T:CsvHelper.CsvWriter">
            <summary>
            Used to write CSV files.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvWriter.#ctor(System.IO.StreamWriter)">
            <summary>
            Creates a new CSV writer using the given <see cref="T:System.IO.StreamWriter"/>.
            </summary>
            <param name="writer">The writer used to write the CSV file.</param>
        </member>
        <member name="M:CsvHelper.CsvWriter.#ctor(System.IO.StreamWriter,CsvHelper.CsvWriterOptions)">
            <summary>
            Creates a new CSV writer using the given <see cref="T:System.IO.StreamWriter"/>
            and <see cref="T:CsvHelper.CsvWriterOptions"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.StreamWriter"/> use to write the CSV file.</param>
            <param name="options">The <see cref="T:CsvHelper.CsvWriterOptions"/> used to write the CSV file.</param>
        </member>
        <member name="M:CsvHelper.CsvWriter.WriteField(System.String)">
            <summary>
            Writes the field to the CSV file.
            When all fields are written for a record,
            <see cref="M:CsvHelper.ICsvWriter.NextRecord"/> must be called
            to complete writing of the current record.
            </summary>
            <param name="field">The field to write.</param>
        </member>
        <member name="M:CsvHelper.CsvWriter.WriteField``1(``0)">
            <summary>
            Writes the field to the CSV file.
            When all fields are written for a record,
            <see cref="M:CsvHelper.ICsvWriter.NextRecord"/> must be called
            to complete writing of the current record.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="field">The field to write.</param>
        </member>
        <member name="M:CsvHelper.CsvWriter.WriteField``1(``0,System.ComponentModel.TypeConverter)">
            <summary>
            Writes the field to the CSV file.
            When all fields are written for a record,
            <see cref="M:CsvHelper.ICsvWriter.NextRecord"/> must be called
            to complete writing of the current record.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="field">The field to write.</param>
            <param name="converter">The converter used to convert the field into a string.</param>
        </member>
        <member name="M:CsvHelper.CsvWriter.NextRecord">
            <summary>
            Ends writing of the current record
            and starts a new record. This is used
            when manually writing records with <see cref="M:CsvHelper.ICsvWriter.WriteField``1(``0)"/>
            </summary>
        </member>
        <member name="M:CsvHelper.CsvWriter.WriteRecord``1(``0)">
            <summary>
            Writes the record to the CSV file.
            </summary>
            <typeparam name="T">The type of the record.</typeparam>
            <param name="record">The record to write.</param>
        </member>
        <member name="M:CsvHelper.CsvWriter.WriteRecords``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes the list of records to the CSV file.
            </summary>
            <typeparam name="T">The type of the record.</typeparam>
            <param name="records">The list of records to write.</param>
        </member>
        <member name="M:CsvHelper.CsvWriter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:CsvHelper.CsvWriter.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">True if the instance needs to be disposed of.</param>
        </member>
        <member name="M:CsvHelper.CsvWriter.CheckDisposed">
            <summary>
            Checks if the instance has been disposed of.
            </summary>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:CsvHelper.CsvWriter.WriteHeader(System.Reflection.PropertyInfo[])">
            <summary>
            Writes the header record from the given properties.
            </summary>
            <param name="properties">The properties to write the header record from.</param>
        </member>
        <member name="M:CsvHelper.CsvWriter.GetProperties``1">
            <summary>
            Gets the properties for the given <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The type to get the properties for.</typeparam>
            <returns>The properties for the given <see cref="T:System.Type"/>/</returns>
        </member>
        <member name="M:CsvHelper.CsvWriter.GetAction``1">
            <summary>
            Gets the action delegate used to write the custom
            class object to the writer.
            </summary>
            <typeparam name="T">The type of the custom class being written.</typeparam>
            <returns>The action delegate.</returns>
        </member>
        <member name="P:CsvHelper.CsvWriter.Delimiter">
            <summary>
            Gets or sets the delimiter used to
            separate the fields of the CSV records.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvWriter.HasHeaderRecord">
            <summary>
            Gets are sets a value indicating if the
            CSV file has a header record.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvWriter.PropertyBindingFlags">
            <summary>
            Gets the binding flags used to get the properties
            from the the custom class object.
            </summary>
        </member>
        <member name="T:CsvHelper.CsvReader">
            <summary>
            Reads data that was parsed from <see cref="T:CsvHelper.ICsvParser"/>.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvReader.#ctor(System.IO.StreamReader)">
            <summary>
            Creates a new CSV reader using <see cref="T:CsvHelper.CsvParser"/> as
            the default parser.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:CsvHelper.CsvReader.#ctor(CsvHelper.ICsvParser)">
            <summary>
            Creates a new CSV reader using the given <see cref="T:CsvHelper.ICsvParser"/>.
            </summary>
            <param name="parser">The <see cref="T:CsvHelper.ICsvParser"/> used to parse the CSV file.</param>
        </member>
        <member name="M:CsvHelper.CsvReader.#ctor(CsvHelper.ICsvParser,CsvHelper.CsvReaderOptions)">
            <summary>
            Creates a new CSV reader using the given <see cref="T:CsvHelper.ICsvParser"/> and <see cref="T:CsvHelper.CsvReaderOptions"/>.
            </summary>
            <param name="parser">The <see cref="T:CsvHelper.ICsvParser"/> used to parse the CSV file.</param>
            <param name="options">The <see cref="T:CsvHelper.CsvReaderOptions"/> used to read the parsed CSV file.</param>
        </member>
        <member name="M:CsvHelper.CsvReader.Read">
            <summary>
            Advances the reader to the next record.
            If HasHeaderRecord is true (true by default), the first record of
            the CSV file will be automatically read in as the header record
            and the second record will be returned.
            </summary>
            <returns>True if there are more records, otherwise false.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField(System.Int32)">
            <summary>
            Gets the raw field at index.
            </summary>
            <param name="index">The index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField(System.String)">
            <summary>
            Gets the raw field at name.
            </summary>
            <param name="name">The named index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField``1(System.Int32)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at index.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="index">The index of the field.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField``1(System.String)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at name.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField``1(System.Int32,System.ComponentModel.TypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at index using
            the given <see cref="T:System.ComponentModel.TypeConverter"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="index">The index of the field.</param>
            <param name="converter">The <see cref="T:System.ComponentModel.TypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField``1(System.String,System.ComponentModel.TypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at name using
            the given <see cref="T:System.ComponentModel.TypeConverter"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="converter">The <see cref="T:System.ComponentModel.TypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.TryGetField(System.Int32,System.String@)">
            <summary>
            Gets the raw field at index.
            </summary>
            <param name="index">The index of the field.</param>
            <param name="field">The raw field.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.TryGetField(System.String,System.String@)">
            <summary>
            Gets the raw field at name.
            </summary>
            <param name="name">The named index of the field.</param>
            <param name="field">The raw field.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.TryGetField``1(System.Int32,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at index.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="index">The index of the field.</param>
            <param name="field">The field converted to type T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.TryGetField``1(System.String,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at name.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.TryGetField``1(System.Int32,System.ComponentModel.TypeConverter,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at index
            using the specified <see cref="T:System.ComponentModel.TypeConverter"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="index">The index of the field.</param>
            <param name="converter">The <see cref="T:System.ComponentModel.TypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.TryGetField``1(System.String,System.ComponentModel.TypeConverter,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at name
            using the specified <see cref="T:System.ComponentModel.TypeConverter"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="converter">The <see cref="T:System.ComponentModel.TypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetRecord``1">
            <summary>
            Gets the record converted into <see cref="T:System.Type"/> T.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the record.</typeparam>
            <returns>The record converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetRecords``1">
            <summary>
            Gets all the records in the CSV file and
            converts each to <see cref="T:System.Type"/> T. The Read method
            should not be used when using this.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the record.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> of records.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:CsvHelper.CsvReader.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">True if the instance needs to be disposed of.</param>
        </member>
        <member name="M:CsvHelper.CsvReader.CheckDisposed">
            <summary>
            Checks if the instance has been disposed of.
            </summary>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:CsvHelper.CsvReader.CheckHasBeenRead">
            <summary>
            Checks if the reader has been read yet.
            </summary>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField(System.Int32,System.ComponentModel.TypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Object"/> using
            the specified <see cref="T:System.ComponentModel.TypeConverter"/>.
            </summary>
            <param name="index">The index of the field.</param>
            <param name="converter">The <see cref="T:System.ComponentModel.TypeConverter"/> used to convert the field to <see cref="T:System.Object"/>.</param>
            <returns>The field converted to <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetField(System.String,System.ComponentModel.TypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Object"/> using
            the specified <see cref="T:System.ComponentModel.TypeConverter"/>.
            </summary>
            <param name="name">The named index of the field.</param>
            <param name="converter">The <see cref="T:System.ComponentModel.TypeConverter"/> used to convert the field to <see cref="T:System.Object"/>.</param>
            <returns>The field converted to <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CsvHelper.CsvReader.GetFieldIndex(System.String)">
            <summary>
            Gets the index of the field at name if found.
            </summary>
            <param name="name">The name of the field to get the index for.</param>
            <returns>The index of the field if found, otherwise -1.</returns>
            <exception cref="T:System.MissingFieldException">Thrown if there isn't a field with name.</exception>
        </member>
        <member name="M:CsvHelper.CsvReader.ParseNamedIndexes">
            <summary>
            Parses the named indexes from the header record.
            </summary>
        </member>
        <member name="M:CsvHelper.CsvReader.GetRecordFunc``1">
            <summary>
            Gets the function delegate used to populate
            a custom class object with data from the reader.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of object that is created
            and populated.</typeparam>
            <returns>The function delegate.</returns>
        </member>
        <member name="P:CsvHelper.CsvReader.HasHeaderRecord">
            <summary>
            Gets a value indicating if the CSV file has a header record.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvReader.FieldHeaders">
            <summary>
            Gets the field headers.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvReader.Strict">
            <summary>
            Gets a value indicating if strict reading is enabled.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvReader.PropertyBindingFlags">
            <summary>
            Gets the binding flags used to populate
            custom class objects.
            </summary>
        </member>
        <member name="P:CsvHelper.CsvReader.Item(System.Int32)">
            <summary>
            Gets the raw field at index.
            </summary>
            <param name="index">The index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="P:CsvHelper.CsvReader.Item(System.String)">
            <summary>
            Gets the raw string field at name.
            </summary>
            <param name="name">The named index of the field.</param>
            <returns>The raw field.</returns>
        </member>
    </members>
</doc>
