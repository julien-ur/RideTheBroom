using System.Collections;
using UnityEngine;
using UnityEngine.VR;

/*
 * This script parses a textfile containing sensor data which was generated by an external python script.
 * The textfile is formatted "int int int int " and the data is ordered top, bottom, left, right.
 * The unit of each int in the textfile is kg on the specific side of the balance board.
 * Then the two directions of each axis are combined into one float and normalized by dividing by the total weight,
 * so the result values are floats between -1 and 1.
 */

public class BroomHardwareInput : MonoBehaviour
{
    private static UnityEngine.XR.XRNode m_VRNode = UnityEngine.XR.XRNode.Head;
    private static string serverUrl = "http://132.199.196.245:5000/besen"; // old: http://192.168.0.104:5000/besen

    private static string serverDataString;

    private static bool serverError = false;
    private static bool verticalInputError = false;
    private static bool horizontalInputError = false;


    void Update()
    {
        // serverDataString = null;
        StartCoroutine(FetchDataStringFromUrl(serverUrl));
    }

    static IEnumerator FetchDataStringFromUrl(string url)
    {
        WWW www = new WWW(url);
        yield return www;

        if (www.error == null)
        {
            serverDataString = www.text;
            serverError = false;
        }
        else
        {
            Debug.Log(www.error);
            serverError = true;
        }
    }

    private static float GetVerticalInput()
    {
        string[] lines = serverDataString.Split(' ');
        float[] accData = { 0, 0, 0 };

        for (int i = 0; i < 3; i++)
        {
            accData[i] = (float)int.Parse(lines[i]);
        }

        float accY = accData[1];
        float inputVertical = Mathf.Clamp((accY - 500) / 50, -1.0f, 1.0f);

        return inputVertical;
    }

    private static float GetHorizontalInput()
    {
        // +++ VR +++
        // Quaternion vrQuat = InputTracking.GetLocalRotation(m_VRNode);
        Quaternion vrQuat = Quaternion.identity;

        float normedRot = Mathf.DeltaAngle(0, vrQuat.eulerAngles.z) / 180;
        float inputHorizontal = Mathf.Clamp(Mathf.Sign(normedRot) * Mathf.Pow(normedRot, 2) * 30, -1.0f, 1.0f);

        return inputHorizontal;
    }

    public static float GetAxis(string axis)
    {
        float inputAxis = 0;

        if (axis == "Horizontal")
        {
            try
            {
                inputAxis = GetHorizontalInput();
                horizontalInputError = false;
            }
            catch (System.Exception e)
            {
                Debug.Log(e);
                horizontalInputError = true;
            }
        }
        else if (axis == "Vertical")
        {
            try
            {
                inputAxis = GetVerticalInput();
                verticalInputError = false;
            }
            catch (System.Exception e)
            {
                Debug.Log(e);
                verticalInputError = true;
            }
        }

        return inputAxis;
    }

    // used for any kind of errors, like lost connetion to hardware etc.
    public static bool HasThrownErrors()
    {
        return verticalInputError || horizontalInputError || serverError;
    }
}